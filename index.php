<?php
require_once __DIR__ . '/vendor/autoload.php';

use Telegram\Bot\Api;
use Tools\{Config};
use Tools\Prepare\{Keyboards};
use Tools\Do\{MakeKeyboard, Commands, DbQuery};

$chart = new ImageCharts();
$telegram = new Api(Config::TOKEN, true);
$update = $telegram->getWebhookUpdate();

file_put_contents(__DIR__ . '/logs.txt', print_r($update, 1), FILE_APPEND);

$chat_id = $update['message']['from']['id'];
$callback_id = $update['callback_query']['id'];
$callback_chat_id = $update['callback_query']['message']['chat']['id'];
$callback_message_id = $update['callback_query']['message']['message_id'];
$callback_data = $update['callback_query']['data'];
$text = $update['message']['text'];
$first_name = $update['message']['chat']['first_name'];

if (!isset($callback_data)) {
	if (empty(DbQuery::condition($chat_id, 'get'))) {
		DbQuery::condition($chat_id, 'add');
	} elseif (DbQuery::condition($chat_id, 'get')[0]['amount'] == 1) {
		if (is_numeric($text)) {
			$category = DbQuery::get_category($chat_id, 1);
			DbQuery::add_record($chat_id, $first_name, DbQuery::get_type($category), $text, $category);
			$telegram->sendMessage([
				'chat_id' => $chat_id,
				'text' => '–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ?',
				'reply_markup' => MakeKeyboard::get_inline(Keyboards::$description),
			]);
			DbQuery::condition($chat_id, 'set');
		} else {
			$telegram->sendMessage([
				'chat_id' => $chat_id,
				'text' => '—ç—Ç–æ –Ω–µ —Ü–∏—Ñ—Ä–∞ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑',
			]);
		}
		exit;
	} elseif (DbQuery::condition($chat_id, 'get')[0]['description'] == 1) {
		DbQuery::add_description($chat_id, $text);
		$telegram->sendMessage([
			'chat_id' => $chat_id,
			'text' => '–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º!',
			'reply_markup' => MakeKeyboard::get_keyboard(Keyboards::$static_keyboard),
		]);
		DbQuery::condition($chat_id, 'set');
		exit;
	}

	if ($text[0] == '/' or $text == '‚ùì –ü–æ–º–æ—â—å') {
		$telegram->sendMessage([
			'chat_id' => $chat_id,
			'text' => Commands::Command($text),
			'parse_mode' => 'HTML',
			'reply_markup' => MakeKeyboard::get_keyboard(Keyboards::$static_keyboard),
		]);
	} elseif ($text == 'üñä –î–æ–±–∞–≤–∏—Ç—å') {
		$telegram->sendMessage([
			'chat_id' => $chat_id,
			'text' => 'üñä –î–æ–±–∞–≤–∏—Ç—å',
			'reply_markup' => MakeKeyboard::get_inline(Keyboards::$choose_input_type),
		]);
	} elseif ($text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏') {
		$telegram->sendMessage([
			'chat_id' => $chat_id,
			'text' => '–≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –ø–æ–∫–∞ –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üòâ',
		]);
	} elseif ($text == 'üìä –ò—Ç–æ–≥–∏') {
		$telegram->sendMessage([
			'chat_id' => $chat_id,
			'text' => 'üìä –ò—Ç–æ–≥–∏',
			'reply_markup' => MakeKeyboard::get_inline(Keyboards::$results),
		]);
	} elseif ($text == 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ') {
		$telegram->sendMessage([
			'chat_id' => $chat_id,
			'text' => 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
			'reply_markup' => MakeKeyboard::get_inline(Keyboards::$manage_records),
		]);
	} else {
		$telegram->sendMessage([
			'chat_id' => $chat_id,
			'text' => '–Ø —ç—Ç–æ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é :(',
			'reply_markup' => MakeKeyboard::get_keyboard(Keyboards::$static_keyboard),
		]);
	}
}

if (isset($callback_data)) {
	if ($callback_data == '+' or $callback_data == '-') {
		$telegram->editMessageText([
			'chat_id' => $callback_chat_id,
			'message_id' => $callback_message_id,
			'text' => $callback_data == '+' ? 'üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞' : 'üîé –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞',
			'reply_markup' => MakeKeyboard::get_inline(Keyboards::categories($callback_data == '+' ? '+' : '-')),
		]);
	} elseif ($callback_data == 'choose_input_type' or $callback_data == 'choose_input_type_back') {
		if ($callback_data == 'choose_input_type_back') {
			DbQuery::condition($callback_chat_id, 'set');
		}
		$telegram->editMessageText([
			'chat_id' => $callback_chat_id,
			'message_id' => $callback_message_id,
			'text' => 'üñä –î–æ–±–∞–≤–∏—Ç—å',
			'reply_markup' => MakeKeyboard::get_inline(Keyboards::$choose_input_type),
		]);
	} elseif (is_numeric($callback_data)) {
		$category = DbQuery::get_category($callback_data);
		$callback_data == 1 or $callback_data == 2 or $callback_data == 3 or $callback_data == 4 ? $word = '–¥–æ—Ö–æ–¥–∞' : $word = '—Ä–∞—Å—Ö–æ–¥–∞';

		$telegram->editMessageText([
			'chat_id' => $callback_chat_id,
			'message_id' => $callback_message_id,
			'text' => "–í–≤–µ–¥–∏—Ç–µ –º–Ω–µ —Å—É–º–º—É –¥–ª—è $word <b>$category</b>",
			'reply_markup' => MakeKeyboard::get_inline(Keyboards::$back),
			'parse_mode' => 'HTML'
		]);
		DbQuery::condition($callback_chat_id, 'set', NULL, $callback_data, 1);
	} elseif ($callback_data == 'add_description') {
		DbQuery::condition($callback_chat_id, 'set', 1);
		$telegram->editMessageText([
			'chat_id' => $callback_chat_id,
			'message_id' => $callback_message_id,
			'text' => '–í–≤–µ–¥–∏—Ç–µ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
			'reply_markup' => MakeKeyboard::get_inline(Keyboards::$back),
		]);
	} elseif ($callback_data == 'no_description') {
		$telegram->deleteMessage(['chat_id' => $callback_chat_id, 'message_id' => $callback_message_id]);
		$telegram->sendMessage([
			'chat_id' => $callback_chat_id,
			'text' => '–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è!',
			'reply_markup' => MakeKeyboard::get_keyboard(Keyboards::$static_keyboard),
		]);
	} elseif ($callback_data == 'results') {
		DbQuery::more_resoults($callback_chat_id, 'set');
		$telegram->editMessageText([
			'chat_id' => $callback_chat_id,
			'message_id' => $callback_message_id,
			'text' => 'üìä –ò—Ç–æ–≥–∏',
			'reply_markup' => MakeKeyboard::get_inline(Keyboards::$results),
		]);
	} elseif ($callback_data == 'results_today') {
		$telegram->editMessageText([
			'chat_id' => $callback_chat_id,
			'message_id' => $callback_message_id,
			'text' => '‚åö –ó–∞ —Å–µ–≥–æ–¥–Ω—è',
			'reply_markup' => MakeKeyboard::get_inline(Keyboards::$results_today),
		]);
	} elseif ($callback_data == 'results_month') {
		$telegram->editMessageText([
			'chat_id' => $callback_chat_id,
			'message_id' => $callback_message_id,
			'text' => 'üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü',
			'reply_markup' => MakeKeyboard::get_inline(Keyboards::$results_month),
		]);
	} elseif (stristr($callback_data, 'day') or stristr($callback_data, 'month')) {
		$type = NULL;
		$interval = $callback_data;
		if ($callback_data[0] == '+' or $callback_data[0] == '-') {
			$type = $callback_data[0];
			$interval = substr($callback_data, 1);
		}
		DbQuery::more_resoults($callback_chat_id, 'set', $type, $interval);
		$resoult = DbQuery::resoult($callback_chat_id, $type, $interval);
		$telegram->editMessageText([
			'chat_id' => $callback_chat_id,
			'message_id' => $callback_message_id,
			'text' => $resoult,
			'parse_mode' => 'HTML',
			'reply_markup' => MakeKeyboard::get_inline(MakeKeyboard::$more_resoults),
		]);
	} elseif ($callback_data == 'more_resoults') {
		try {
			$more_resoults = DbQuery::more_resoults($callback_chat_id, 'get');

			$get_more_resoults = DbQuery::get_more_resoults($callback_chat_id, $more_resoults[0]['resoult_type'], $more_resoults[0]['resoult_interval']);

			DbQuery::more_resoults($callback_chat_id, 'set');

			$telegram->editMessageText([
				'chat_id' => $callback_chat_id,
				'message_id' => $callback_message_id,
				'text' => $get_more_resoults,
				'parse_mode' => 'HTML',
			]);
		} catch (Exception $x) {
			DbQuery::more_resoults($callback_chat_id, 'set');

			$telegram->editMessageText([
				'chat_id' => $callback_chat_id,
				'message_id' => $callback_message_id,
				'text' => "–£ —Ç–µ–±—è –æ—à–∏–±–∫–∞!\n\n" . $x->getMessage() . "\n\n" . $x,
			]);
		}
	} elseif ($callback_data == 'delete_l' or $callback_data == 'delete_m' or $callback_data == 'delete_all') {

		$interval = match ($callback_data) {
			'delete_l' => 'last',
			'delete_m' => 'month',
			'delete_all' => 'all'
		};

		DbQuery::answer_to_delete($callback_chat_id, 'set', $interval);

		$delete_interval = match ($interval) {
			'last' => '–ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å',
			'month' => '–∑–∞–ø–∏—Å–∏ –∑–∞ –º–µ—Å—è—Ü',
			'all' => '–≤—Å–µ —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏'
		};

		$telegram->editMessageText([
			'chat_id' => $callback_chat_id,
			'message_id' => $callback_message_id,
			'text' => "<b>–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å $delete_interval?</b>",
			'parse_mode' => 'HTML',
			'reply_markup' => MakeKeyboard::get_inline(MakeKeyboard::$delete_records),
		]);
	} elseif ($callback_data == 'not_delete') {
		DbQuery::answer_to_delete($callback_chat_id, 'set');
		$telegram->editMessageText([
			'chat_id' => $callback_chat_id,
			'message_id' => $callback_message_id,
			'text' => 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
			'reply_markup' => MakeKeyboard::get_inline(Keyboards::$manage_records),
		]);
	} elseif ($callback_data == 'delete') {

		$interval = DbQuery::answer_to_delete($callback_chat_id, 'get')[0]['delete_interval'];
		DbQuery::delete($callback_chat_id, $interval);
		DbQuery::answer_to_delete($callback_chat_id, 'set');

		$delete_interval = match ($interval) {
			'last' => 'üß® –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!',
			'month' => 'üí£ –ó–∞–ø–∏—Å–∏ –∑–∞ –º–µ—Å—è—Ü —É–¥–∞–ª–µ–Ω—ã!',
			'all' => '‚ùå –í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã!'
		};

		$telegram->editMessageText([
			'chat_id' => $callback_chat_id,
			'message_id' => $callback_message_id,
			'text' => $delete_interval,
			'parse_mode' => 'HTML',
		]);
	}
}

